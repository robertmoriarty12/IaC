name: Deploy Azure IaC Project

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Project name (folder under projects/)'
        required: true
        default: 'hybrid-ad-lab'
      environment:
        description: 'Environment (dev, test, prod)'
        required: true
        default: 'dev'
      location:
        description: 'Azure region'
        required: true
        default: 'eastus'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Repo
      - name: Checkout Repo
        uses: actions/checkout@v4

      # 2. Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3. Install Bicep CLI
      - name: Install Bicep CLI
        run: az bicep install

      # 4. Check Bicep Version
      - name: Check Bicep Version
        run: az bicep version

      # 5. Validate Bicep Template
      - name: Validate Bicep Template
        run: |
          echo "Validating Bicep for project ${{ github.event.inputs.project }}..."
          az bicep build --file projects/${{ github.event.inputs.project }}/main.bicep
          echo "✅ Bicep validation successful"

      # 6. Check if Resource Group exists, create if not
      - name: Check/Create Resource Group
        run: |
          RG_NAME="${{ github.event.inputs.project }}-${{ github.event.inputs.environment }}-rg"
          echo "Checking if resource group $RG_NAME exists..."
          
          if az group show --name $RG_NAME --query "name" --output tsv 2>/dev/null; then
            echo "✅ Resource group $RG_NAME already exists"
          else
            echo "Creating resource group $RG_NAME..."
            az group create \
              --name $RG_NAME \
              --location ${{ github.event.inputs.location }} \
              --tags "Project=${{ github.event.inputs.project }}" "Environment=${{ github.event.inputs.environment }}" "DeployedBy=GitHubActions"
            echo "✅ Resource group $RG_NAME created successfully"
          fi

      # 7. Deploy Bicep Template
      - name: Deploy Bicep Template
        run: |
          RG_NAME="${{ github.event.inputs.project }}-${{ github.event.inputs.environment }}-rg"
          echo "Deploying ${{ github.event.inputs.project }} in $RG_NAME..."
          
          # Deploy with what-if first
          echo "Running what-if analysis..."
          az deployment group what-if \
            --resource-group $RG_NAME \
            --template-file projects/${{ github.event.inputs.project }}/main.bicep \
            --parameters @projects/${{ github.event.inputs.project }}/main.parameters.json \
            --parameters \
                projectName=${{ github.event.inputs.project }} \
                environment=${{ github.event.inputs.environment }} \
                location=${{ github.event.inputs.location }}
          
          # Actual deployment
          echo "Starting deployment..."
          az deployment group create \
            --resource-group $RG_NAME \
            --template-file projects/${{ github.event.inputs.project }}/main.bicep \
            --parameters @projects/${{ github.event.inputs.project }}/main.parameters.json \
            --parameters \
                projectName=${{ github.event.inputs.project }} \
                environment=${{ github.event.inputs.environment }} \
                location=${{ github.event.inputs.location }} \
            --query "{status:properties.provisioningState, outputs:properties.outputs}" \
            --output json

      # 8. Get VM Public IPs
      - name: Get VM Public IPs
        run: |
          RG_NAME="${{ github.event.inputs.project }}-${{ github.event.inputs.environment }}-rg"
          echo "Fetching public IPs for VMs in $RG_NAME..."
          az vm list-ip-addresses --resource-group $RG_NAME --output table

      # 9. Display Connection Information
      - name: Display Connection Information
        run: |
          RG_NAME="${{ github.event.inputs.project }}-${{ github.event.inputs.environment }}-rg"
          echo "=== CONNECTION INFORMATION ==="
          echo "Resource Group: $RG_NAME"
          echo ""
          echo "VMs and their public IPs:"
          az vm list-ip-addresses --resource-group $RG_NAME --query "[].{VM:virtualMachine.name, PublicIP:virtualMachine.network.publicIpAddresses[0].ipAddress}" --output table
          echo ""
          echo "To connect via RDP:"
          echo "1. Use the public IP addresses above"
          echo "2. Username: labadmin"
          echo "3. Password: P@ssword123!"
          echo ""
          echo "⚠️  Remember to secure your environment after deployment!"
